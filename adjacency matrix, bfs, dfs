#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Structure to represent a graph as an adjacency matrix
struct Graph {
    int vertices;
    int matrix[MAX_VERTICES][MAX_VERTICES];
};

// Function to initialize the graph
void initializeGraph(struct Graph* graph, int vertices) {
    graph->vertices = vertices;

    // Initialize the adjacency matrix with zeros
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->matrix[i][j] = 0;
        }
    }
}

// Function to add an edge between two vertices
void addEdge(struct Graph* graph, int source, int destination) {
    if (source >= 0 && source < graph->vertices && destination >= 0 && destination < graph->vertices) {
        // Since the graph is undirected, we update both matrix[source][destination] and matrix[destination][source] to 1
        graph->matrix[source][destination] = 1;
        graph->matrix[destination][source] = 1;
    } else {
        printf("Invalid edge: (%d, %d)\n", source, destination);
    }
}

// Function to perform Breadth-First Search (BFS) traversal
void BFS(struct Graph* graph, int startVertex) {
    int visited[MAX_VERTICES] = {0}; // Initialize all vertices as not visited

    // Create a queue for BFS
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;

    // Enqueue the starting vertex and mark it as visited
    queue[rear++] = startVertex;
    visited[startVertex] = 1;

    printf("BFS Traversal starting from vertex %d: ", startVertex);

    while (front < rear) {
        int currentVertex = queue[front++];

        printf("%d ", currentVertex);

        // Visit all adjacent vertices of the current vertex
        for (int i = 0; i < graph->vertices; i++) {
            if (graph->matrix[currentVertex][i] == 1 && !visited[i]) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }
    }

    printf("\n");
}

// Recursive function for Depth-First Search (DFS) traversal
void DFSUtil(struct Graph* graph, int currentVertex, int visited[]) {
    printf("%d ", currentVertex);
    visited[currentVertex] = 1;

    // Visit all adjacent vertices of the current vertex
    for (int i = 0; i < graph->vertices; i++) {
        if (graph->matrix[currentVertex][i] == 1 && !visited[i]) {
            DFSUtil(graph, i, visited);
        }
    }
}

// Function to perform Depth-First Search (DFS) traversal
void DFS(struct Graph* graph, int startVertex) {
    int visited[MAX_VERTICES] = {0}; // Initialize all vertices as not visited

    printf("DFS Traversal starting from vertex %d: ", startVertex);

    DFSUtil(graph, startVertex, visited);

    printf("\n");
}

int main() {
    struct Graph graph;
    initializeGraph(&graph, 5); // Create a graph with 5 vertices

    // Add edges to the graph
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 2, 4);

    // Perform BFS and DFS traversals starting from vertex 0
    BFS(&graph, 0);
    DFS(&graph, 0);

    return 0;
}
