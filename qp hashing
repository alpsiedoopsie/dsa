#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 10

struct HashTableQuadraticProbing {
    char *keys[TABLE_SIZE];
    int values[TABLE_SIZE];
};

unsigned int hash_function(char *key) {
    unsigned int hash = 0;
    while (*key) {
        hash = (hash << 5) + *key++;
    }
    return hash % TABLE_SIZE;
}

unsigned int quadratic_probe(unsigned int index, int attempt) {
    // Quadratic probing: h'(i) = (h(i) + i^2) % TABLE_SIZE
    return (index + attempt * attempt) % TABLE_SIZE;
}

void insert(struct HashTableQuadraticProbing *hash_table, char *key, int value) {
    unsigned int index = hash_function(key);
    int attempt = 0;

    while (hash_table->keys[index] != NULL) {
        // Quadratic probing
        index = quadratic_probe(index, ++attempt);
    }

    hash_table->keys[index] = strdup(key);
    hash_table->values[index] = value;
}

int search(struct HashTableQuadraticProbing *hash_table, char *key) {
    unsigned int index = hash_function(key);
    int attempt = 0;

    while (hash_table->keys[index] != NULL) {
        if (strcmp(hash_table->keys[index], key) == 0) {
            return hash_table->values[index];
        }

        // Quadratic probing
        index = quadratic_probe(index, ++attempt);
    }

    return -1; // Not found
}

int main() {
    struct HashTableQuadraticProbing hash_table_quadratic_probing;

    for (int i = 0; i < TABLE_SIZE; i++) {
        hash_table_quadratic_probing.keys[i] = NULL;
    }

    insert(&hash_table_quadratic_probing, "apple", 5);
    insert(&hash_table_quadratic_probing, "banana", 8);
    insert(&hash_table_quadratic_probing, "cherry", 3);

    printf("Search for 'apple': %d\n", search(&hash_table_quadratic_probing, "apple"));   // Output: 5
    printf("Search for 'grape': %d\n", search(&hash_table_quadratic_probing, "grape"));   // Output: -1

    return 0;
}
