#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 10

struct Node {
    char *key;
    int value;
    struct Node *next;
};

struct HashTableSeparateChaining {
    struct Node *table[TABLE_SIZE];
};

unsigned int hash_function(char *key) {
    unsigned int hash = 0;
    while (*key) {
        hash = (hash << 5) + *key++;
    }
    return hash % TABLE_SIZE;
}

struct Node *create_node(char *key, int value) {
    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
    if (new_node) {
        new_node->key = strdup(key);
        new_node->value = value;
        new_node->next = NULL;
    }
    return new_node;
}

void insert(struct HashTableSeparateChaining *hash_table, char *key, int value) {
    unsigned int index = hash_function(key);
    struct Node *new_node = create_node(key, value);

    if (hash_table->table[index] == NULL) {
        hash_table->table[index] = new_node;
    } else {
        struct Node *current = hash_table->table[index];
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = new_node;
    }
}

int search(struct HashTableSeparateChaining *hash_table, char *key) {
    unsigned int index = hash_function(key);
    struct Node *current = hash_table->table[index];

    while (current != NULL) {
        if (strcmp(current->key, key) == 0) {
            return current->value;
        }
        current = current->next;
    }

    return -1; // Not found
}

int main() {
    struct HashTableSeparateChaining hash_table_chaining;

    for (int i = 0; i < TABLE_SIZE; i++) {
        hash_table_chaining.table[i] = NULL;
    }

    insert(&hash_table_chaining, "apple", 5);
    insert(&hash_table_chaining, "banana", 8);
    insert(&hash_table_chaining, "cherry", 3);

    printf("Search for 'apple': %d\n", search(&hash_table_chaining, "apple"));   // Output: 5
    printf("Search for 'grape': %d\n", search(&hash_table_chaining, "grape"));   // Output: -1

    return 0;
}

